원근 투영 나누기 연산
1. 3D -> 2D로 바꾸는 연산
	(x, y, z) -> (x/z, y/z, 1) (FOV가 90도 일 떄)
2. x/z, y/z의 절대값이 1보다 작거나 같게되면 카메라에 보이는 점
3. 원근감이 자연스럽게 표현됨

대부분 게임의 FOV는 60도 속도감이 필요하다면 더 좁게
FOV가 넓으면 프레임레이트가 떨어짐 ( 오브젝트가 더 많이 보이기 때문 )

d = 투영 평면과 카메라 사이의 거리
x(projected) = x / (z / d) (FOV = 90도일떄 d = 1)
d = 1/tanθ

카메라와의 거리에 따라서 오브젝트의 디테일을 다르게 하는것
Level of Detail (!) 계속 추구해야 하는 목표중 하나
카메라와의 거리에 따라서 각각 다른 메쉬를 그리도록 함 CMesh **p

벡터 : 순서쌍(x,y,z)
1. 점을 표현하는 벡터
   (원점 + 벡터)
2. 방향을 표현하는 벡터

Normal Vector 법선벡터 : 방향을 나타내는 벡터
벡터의 뺄셈 : 이동의 방향을 얻는 수단
1. 이동 방향
2. 정규화를 하면 방향을 알 수 있음
3. 스칼라곱을 하면 이동벡터를 얻을 수 있음
4. 이동벡터를 기존 위치에 더하면 이동

총알의 움직임 : 총알의 위치벡터 += 총알의 속력 x 단위벡터 
벡터의 외적연산 : 벡터의 수직인 벡터를 찾아내는것 세상의 어디를 향하고 있는가