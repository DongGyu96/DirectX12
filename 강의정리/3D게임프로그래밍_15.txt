DXGI - 전체화면모드 전환(alt + enter), 프리젠트
DXGISwapChain
ResizeTarget - 출력 타겟(윈도우)의 크기를 변경
DXGI에서는 SwapChain으로 생성된 버퍼를 후면버퍼로 칭함
D3D에서는 후면버퍼를 Render Target으로 칭함

모든 비디오 메모리에 있는 메모리들은 그 메모리에 그림그릴 데이터들을 넣어놓음
그것을 리소스라고 하는 베이스 클래스로 관리함 
비디오메모리를 나타내는 인터페이스는 리소스
그후 Present

수직회귀 -  	현재 스캔중인 픽셀이 수평 스캔이 끝나고 우측최하단에서 
		다시 좌측최상단으로 옮겨지는 것
이때 present를 호출하는것이 가장 좋음
그래픽카드가 모니터에 그림을 그리는 중에 바로 프리젠트를 한다면 안되기 때문에
수직회귀가 일어날때 맞춰서 present를 하도록 함 ( 그렇지 않으면 이미지가 섞임 )
SyncInterval에서 조절을 해줄 수 있음 값을 2를 준다면 60분의 2초마다
3을 준다면 60분의 3초마다 실행이 되기 때문에 1을 주는것이 가장 좋음 ( 이상적 )
프리젠트가 느려지면 렌더링도 느려짐 따라서 0을 준다면 속도가 제일 빠름
Flags도 0을 주는게 가장 이상적 ( 컴퓨터가 알아서 하도록 )

DXGIFactory2::CreateSwapChainForHwnd
Stereo, AlphaMode 인자 2개가 새로 추가됨
Stereo - 	입체영상을 보여줄수 있는가 없는가
	(입체는 왼쪽 오른쪽 2개의 영상이 필요하기 떄문 ex) VR )
AlphaMode - 스왑체인이 투명한 알파모드를 처리할수 있게 만들것인가
입체를 처리하지않고 알파모드를 처리하지 않는다면 굳이 쓸 이유는 없음

DXGISwapChain::ResizeBuffers
Width, Height가 0으로 둔다면 자동적으로 클라이언트 영역 가로 세로로 설정함
후면버퍼의 크기를 바꾸면 준비한 이미지들이 확대나 축소가 되기 떄문에
이미지가 가지고 있는 정보가 손실될 가능성이 생김
그래서 대부분의 게임은 준비한 이미지를 풀 스크린의 상태가 되면
바탕화면의 픽셀의 수를 내 후면버퍼 크기에 맞게 바탕화면의 픽셀의 수를 바꿈
그렇다면 데이터가 확대나 축소가 될 일이 없음 (확대 축소를 하게 되면 시간이 걸림)
즉 후면버퍼의 크기를 바꾸는건 권장할 사항이 아님 (반대로 해야함)

내 스왑체인이 전체화면모드로 바꿔도 후면버퍼의 크기를 바꾸는게 아닌 바탕화면
해상도를 바꿔야함 즉 ResizeTarget 함수를 사용해야함 내 게임의 클라이언트 영역
픽셀은 내 후면버퍼와 똑같이 되어야함 
adjustwindowrect 내가 원하는 사이즈로 고정

CPU는 커맨드큐를 만들어서 커맨드리스트를 집어넣고 GPU는 그 커맨드큐에서
순서대로 리스트를 꺼내가서 실행함
리스트와 큐 모두 순서가 있는 자료구조
커맨드큐에 넣는 함수 : ID3D12CommandQueue::ExecuteCommandLists()
Execute / 실행을 하는 것이 아닌 Push하는 것 집어넣는 함수임
절대로 명령을 즉시 실행하는 함수가 아님
실행을 하고나서는 리스트를 잠궈야 함 ID3D12GraphicsCommandList::Close()
따라서 CPU와 GPU를 동기화해야함 
동기화 하는 방법
GPU가 명령어를 끝날때마다 CPU에서 명령어를 넣어줌 그러나 CPU가 기다리는 문제
그러니 GPU는 명령어를 계속 처리하고 CPU는 명령어를 계속 넣어줌
명령어리스트를 만들고 잠근뒤 Execute로 큐에 넣는다
명령어리스트는 Set & Draw로 이루어짐

하나의 명령이 실행이 되기 위해서는 Resource데이터가 비디오메모리에 
담겨있어야하고 GPU가 읽어와서 사용햐여 험
Resource (이미지텍스처, 변환 행렬 등등)
Resource때문에 CPU와 GPU가 동기화가 일어나야 함

소스코드를 논리적으로 2개로 나뉘어져야함 Offline / Online
Offline : BulidObject, CreateSwapChain 등 초기화 함수
FrameRate와 관계가 없음 그렇기 때문에 커맨드 큐를 만드는 함수는 Offline에서 함
모든 Create함수또한 여기에서 하도록 D3DDevice의 멤버함수를 사용하는 곳
비디오메모리가 허용하는 한 만들 수 있는것은 미리 다 만들어둠

Online (RealTime, Dynamic) : 한 프레임동안 처리해야하는 어떠한 일들
FrameAdvence() 함수에서 쓰기 때문에 이제 Online함수는 Frame함수라고 부름
FrameRate에 관계 있는 일 여기에서 CommandList의 함수를 호출해야함
Set & Draw가 일어나는 곳 ( 사용자 입력처리, 애니메이션 등 )
시간이 걸리는 일들은 절대로 이곳에서 하면 안됨
피치못하게 시간이 걸리는 일들을 해야한다면 무엇인가 장치를 만들어야한다 (로딩)

ID3D12Device::CreateCommandQueue
D3D12_COMMAND_QUEUE_DESC 구조체에 있는 멤버변수
D3D12_COMMAND_LIST_TYPE Type 보통 TYPE_DIRECT를 사용함
INT Priority 명령 큐의 우선순위 (보통 HIGH)
Flags 보통 FLAG_NONE으로 기본 명령 큐로 사용
NodeMask로 GPU를 배정함 단일 GPU일 경우 0이면 됨

명령큐가 만들어지면 커맨드리스트를 추가할 수 있음
커맨드리스트를 추가하려면 Command Allocator를 만들어 커맨드를 저장하기위한
메모리를 할당해야함
ID3D12Device::CreateCommandAllocator
같은 할당자에서 동시에 두개 이상의 명령 리스트가 열린 상태가 될 수 없음
Command List가 만들어 지면 명령어를 순서대로 담을 수 있음
명령어를 담을려면 리스트의 상태는 오픈상태가 되어야하고 다 담았다면
더이상 담지 못하도록 Close함수로 닫아야함 Close로 닫고 집어넣을 것

리스트 생성에서 Allocator가 필요하기 때문에 Allocator를 먼저 만들어야함
ID3D12Device::CreateCommandList
만약 CommandQueue를 COPY type으로 했다면 할당자와 리스트또한 COPY로
초기 상태가 없다면 파이프라인스테이트는 NULL로
Reset -> 명령어 set & draw -> close -> 큐에 할당 executecommandlists















